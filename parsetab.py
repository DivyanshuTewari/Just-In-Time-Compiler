
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftPLUSMINUSleftMULDIVnonassocLPARENRPARENDIV EQUALS IDENTIFIER LPAREN MINUS MUL NUMBER PLUS RPAREN SEMICOLON STRINGprogram : statement\n               | statement programstatement : assignment\n                 | expression SEMICOLON\n                 | expressionassignment : IDENTIFIER EQUALS expression SEMICOLONexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression MUL expression\n                  | expression DIV expressionexpression : factorfactor : NUMBERfactor : IDENTIFIERfactor : STRINGfactor : LPAREN expression RPAREN'
    
_lr_action_items = {'IDENTIFIER':([0,2,3,4,5,6,7,8,9,11,12,13,14,15,16,18,19,20,21,22,24,25,],[5,5,-3,-5,-13,-11,-12,-14,18,-4,18,18,18,18,18,-13,-7,-8,-9,-10,-15,-6,]),'NUMBER':([0,2,3,4,5,6,7,8,9,11,12,13,14,15,16,18,19,20,21,22,24,25,],[7,7,-3,-5,-13,-11,-12,-14,7,-4,7,7,7,7,7,-13,-7,-8,-9,-10,-15,-6,]),'STRING':([0,2,3,4,5,6,7,8,9,11,12,13,14,15,16,18,19,20,21,22,24,25,],[8,8,-3,-5,-13,-11,-12,-14,8,-4,8,8,8,8,8,-13,-7,-8,-9,-10,-15,-6,]),'LPAREN':([0,2,3,4,5,6,7,8,9,11,12,13,14,15,16,18,19,20,21,22,24,25,],[9,9,-3,-5,-13,-11,-12,-14,9,-4,9,9,9,9,9,-13,-7,-8,-9,-10,-15,-6,]),'$end':([1,2,3,4,5,6,7,8,10,11,18,19,20,21,22,24,25,],[0,-1,-3,-5,-13,-11,-12,-14,-2,-4,-13,-7,-8,-9,-10,-15,-6,]),'SEMICOLON':([4,5,6,7,8,18,19,20,21,22,23,24,],[11,-13,-11,-12,-14,-13,-7,-8,-9,-10,25,-15,]),'PLUS':([4,5,6,7,8,17,18,19,20,21,22,23,24,],[12,-13,-11,-12,-14,12,-13,-7,-8,-9,-10,12,-15,]),'MINUS':([4,5,6,7,8,17,18,19,20,21,22,23,24,],[13,-13,-11,-12,-14,13,-13,-7,-8,-9,-10,13,-15,]),'MUL':([4,5,6,7,8,17,18,19,20,21,22,23,24,],[14,-13,-11,-12,-14,14,-13,14,14,-9,-10,14,-15,]),'DIV':([4,5,6,7,8,17,18,19,20,21,22,23,24,],[15,-13,-11,-12,-14,15,-13,15,15,-9,-10,15,-15,]),'EQUALS':([5,],[16,]),'RPAREN':([6,7,8,17,18,19,20,21,22,24,],[-11,-12,-14,24,-13,-7,-8,-9,-10,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,],[1,10,]),'statement':([0,2,],[2,2,]),'assignment':([0,2,],[3,3,]),'expression':([0,2,9,12,13,14,15,16,],[4,4,17,19,20,21,22,23,]),'factor':([0,2,9,12,13,14,15,16,],[6,6,6,6,6,6,6,6,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','stringSupport.py',83),
  ('program -> statement program','program',2,'p_program','stringSupport.py',84),
  ('statement -> assignment','statement',1,'p_statement','stringSupport.py',91),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','stringSupport.py',92),
  ('statement -> expression','statement',1,'p_statement','stringSupport.py',93),
  ('assignment -> IDENTIFIER EQUALS expression SEMICOLON','assignment',4,'p_assignment','stringSupport.py',97),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','stringSupport.py',101),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','stringSupport.py',102),
  ('expression -> expression MUL expression','expression',3,'p_expression_binop','stringSupport.py',103),
  ('expression -> expression DIV expression','expression',3,'p_expression_binop','stringSupport.py',104),
  ('expression -> factor','expression',1,'p_expression_factor','stringSupport.py',108),
  ('factor -> NUMBER','factor',1,'p_factor_number','stringSupport.py',112),
  ('factor -> IDENTIFIER','factor',1,'p_factor_identifier','stringSupport.py',116),
  ('factor -> STRING','factor',1,'p_factor_string','stringSupport.py',120),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','stringSupport.py',124),
]
