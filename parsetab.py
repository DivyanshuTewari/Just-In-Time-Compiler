
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftORleftANDleftEQNEleftLTLEGTGEleftPLUSMINUSleftMULDIVrightNOTnonassocLPARENRPARENAND BOOL DIV EQ EQUALS GE GT IDENTIFIER LE LPAREN LT MINUS MUL NE NOT NUMBER OR PLUS RPAREN SEMICOLON STRINGprogram : statement\n               | statement programstatement : assignment\n                 | expression SEMICOLON\n                 | expressionassignment : IDENTIFIER EQUALS expression SEMICOLONexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression MUL expression\n                  | expression DIV expression\n                  | expression AND expression\n                  | expression OR expression\n                  | expression EQ expression\n                  | expression NE expression\n                  | expression LT expression\n                  | expression GT expression\n                  | expression LE expression\n                  | expression GE expressionexpression : NOT expressionexpression : factorfactor : BOOLfactor : NUMBERfactor : IDENTIFIERfactor : STRINGfactor : LPAREN expression RPAREN'
    
_lr_action_items = {'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,34,35,36,37,38,39,40,41,43,44,],[5,5,-3,-5,-23,28,-20,-21,-22,-24,28,-4,28,28,28,28,28,28,28,28,28,28,28,28,28,-19,-23,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,-6,]),'NOT':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,34,35,36,37,38,39,40,41,43,44,],[6,6,-3,-5,-23,6,-20,-21,-22,-24,6,-4,6,6,6,6,6,6,6,6,6,6,6,6,6,-19,-23,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,-6,]),'BOOL':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,34,35,36,37,38,39,40,41,43,44,],[8,8,-3,-5,-23,8,-20,-21,-22,-24,8,-4,8,8,8,8,8,8,8,8,8,8,8,8,8,-19,-23,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,-6,]),'NUMBER':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,34,35,36,37,38,39,40,41,43,44,],[9,9,-3,-5,-23,9,-20,-21,-22,-24,9,-4,9,9,9,9,9,9,9,9,9,9,9,9,9,-19,-23,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,-6,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,34,35,36,37,38,39,40,41,43,44,],[10,10,-3,-5,-23,10,-20,-21,-22,-24,10,-4,10,10,10,10,10,10,10,10,10,10,10,10,10,-19,-23,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,-6,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,34,35,36,37,38,39,40,41,43,44,],[11,11,-3,-5,-23,11,-20,-21,-22,-24,11,-4,11,11,11,11,11,11,11,11,11,11,11,11,11,-19,-23,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,-6,]),'$end':([1,2,3,4,5,7,8,9,10,12,13,27,28,30,31,32,33,34,35,36,37,38,39,40,41,43,44,],[0,-1,-3,-5,-23,-20,-21,-22,-24,-2,-4,-19,-23,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,-6,]),'SEMICOLON':([4,5,7,8,9,10,27,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[13,-23,-20,-21,-22,-24,-19,-23,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,44,-25,]),'PLUS':([4,5,7,8,9,10,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[14,-23,-20,-21,-22,-24,-19,-23,14,-7,-8,-9,-10,14,14,14,14,14,14,14,14,14,-25,]),'MINUS':([4,5,7,8,9,10,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[15,-23,-20,-21,-22,-24,-19,-23,15,-7,-8,-9,-10,15,15,15,15,15,15,15,15,15,-25,]),'MUL':([4,5,7,8,9,10,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[16,-23,-20,-21,-22,-24,-19,-23,16,16,16,-9,-10,16,16,16,16,16,16,16,16,16,-25,]),'DIV':([4,5,7,8,9,10,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[17,-23,-20,-21,-22,-24,-19,-23,17,17,17,-9,-10,17,17,17,17,17,17,17,17,17,-25,]),'AND':([4,5,7,8,9,10,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[18,-23,-20,-21,-22,-24,-19,-23,18,-7,-8,-9,-10,-11,18,-13,-14,-15,-16,-17,-18,18,-25,]),'OR':([4,5,7,8,9,10,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[19,-23,-20,-21,-22,-24,-19,-23,19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,19,-25,]),'EQ':([4,5,7,8,9,10,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[20,-23,-20,-21,-22,-24,-19,-23,20,-7,-8,-9,-10,20,20,-13,-14,-15,-16,-17,-18,20,-25,]),'NE':([4,5,7,8,9,10,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[21,-23,-20,-21,-22,-24,-19,-23,21,-7,-8,-9,-10,21,21,-13,-14,-15,-16,-17,-18,21,-25,]),'LT':([4,5,7,8,9,10,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[22,-23,-20,-21,-22,-24,-19,-23,22,-7,-8,-9,-10,22,22,22,22,-15,-16,-17,-18,22,-25,]),'GT':([4,5,7,8,9,10,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[23,-23,-20,-21,-22,-24,-19,-23,23,-7,-8,-9,-10,23,23,23,23,-15,-16,-17,-18,23,-25,]),'LE':([4,5,7,8,9,10,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[24,-23,-20,-21,-22,-24,-19,-23,24,-7,-8,-9,-10,24,24,24,24,-15,-16,-17,-18,24,-25,]),'GE':([4,5,7,8,9,10,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[25,-23,-20,-21,-22,-24,-19,-23,25,-7,-8,-9,-10,25,25,25,25,-15,-16,-17,-18,25,-25,]),'EQUALS':([5,],[26,]),'RPAREN':([7,8,9,10,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,],[-20,-21,-22,-24,-19,-23,43,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-25,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,],[1,12,]),'statement':([0,2,],[2,2,]),'assignment':([0,2,],[3,3,]),'expression':([0,2,6,11,14,15,16,17,18,19,20,21,22,23,24,25,26,],[4,4,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,]),'factor':([0,2,6,11,14,15,16,17,18,19,20,21,22,23,24,25,26,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','booleanSupport.py',90),
  ('program -> statement program','program',2,'p_program','booleanSupport.py',91),
  ('statement -> assignment','statement',1,'p_statement','booleanSupport.py',96),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','booleanSupport.py',97),
  ('statement -> expression','statement',1,'p_statement','booleanSupport.py',98),
  ('assignment -> IDENTIFIER EQUALS expression SEMICOLON','assignment',4,'p_assignment','booleanSupport.py',102),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','booleanSupport.py',106),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','booleanSupport.py',107),
  ('expression -> expression MUL expression','expression',3,'p_expression_binop','booleanSupport.py',108),
  ('expression -> expression DIV expression','expression',3,'p_expression_binop','booleanSupport.py',109),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','booleanSupport.py',110),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','booleanSupport.py',111),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','booleanSupport.py',112),
  ('expression -> expression NE expression','expression',3,'p_expression_binop','booleanSupport.py',113),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','booleanSupport.py',114),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','booleanSupport.py',115),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','booleanSupport.py',116),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','booleanSupport.py',117),
  ('expression -> NOT expression','expression',2,'p_expression_unop','booleanSupport.py',121),
  ('expression -> factor','expression',1,'p_expression_factor','booleanSupport.py',125),
  ('factor -> BOOL','factor',1,'p_factor_bool','booleanSupport.py',129),
  ('factor -> NUMBER','factor',1,'p_factor_number','booleanSupport.py',133),
  ('factor -> IDENTIFIER','factor',1,'p_factor_identifier','booleanSupport.py',137),
  ('factor -> STRING','factor',1,'p_factor_string','booleanSupport.py',141),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','booleanSupport.py',145),
]
